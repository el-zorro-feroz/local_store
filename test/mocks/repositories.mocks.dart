// Mocks generated by Mockito 5.4.2 from annotations
// in local_store/test/mocks/repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:local_store/core/failure/failure.dart' as _i5;
import 'package:local_store/src/domain/entities/authorization/authorization_data.dart'
    as _i8;
import 'package:local_store/src/domain/entities/authorization/authorization_params.dart'
    as _i9;
import 'package:local_store/src/domain/entities/test.dart' as _i6;
import 'package:local_store/src/domain/repositories/authorization_repository.dart'
    as _i7;
import 'package:local_store/src/domain/repositories/test_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TestRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestRepository extends _i1.Mock implements _i3.TestRepository {
  @override
  _i4.FutureOr<_i2.Either<_i5.Failure, _i6.Test>> createTest(String? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTest,
          [data],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Test>>.value(
            _FakeEither_0<_i5.Failure, _i6.Test>(
          this,
          Invocation.method(
            #createTest,
            [data],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Test>>.value(
                _FakeEither_0<_i5.Failure, _i6.Test>(
          this,
          Invocation.method(
            #createTest,
            [data],
          ),
        )),
      ) as _i4.FutureOr<_i2.Either<_i5.Failure, _i6.Test>>);
  @override
  _i4.FutureOr<_i2.Either<_i5.Failure, _i6.Test>> getTestById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTestById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Test>>.value(
            _FakeEither_0<_i5.Failure, _i6.Test>(
          this,
          Invocation.method(
            #getTestById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Test>>.value(
                _FakeEither_0<_i5.Failure, _i6.Test>(
          this,
          Invocation.method(
            #getTestById,
            [id],
          ),
        )),
      ) as _i4.FutureOr<_i2.Either<_i5.Failure, _i6.Test>>);
  @override
  _i4.FutureOr<_i2.Either<_i5.Failure, List<_i6.Test>>> getAllTests() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTests,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Test>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Test>>(
          this,
          Invocation.method(
            #getAllTests,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Test>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Test>>(
          this,
          Invocation.method(
            #getAllTests,
            [],
          ),
        )),
      ) as _i4.FutureOr<_i2.Either<_i5.Failure, List<_i6.Test>>>);
  @override
  _i4.FutureOr<_i2.Either<_i5.Failure, _i6.Test>> updateTestById(
          _i3.UpdateTestParams? updateTestParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTestById,
          [updateTestParams],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Test>>.value(
            _FakeEither_0<_i5.Failure, _i6.Test>(
          this,
          Invocation.method(
            #updateTestById,
            [updateTestParams],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Test>>.value(
                _FakeEither_0<_i5.Failure, _i6.Test>(
          this,
          Invocation.method(
            #updateTestById,
            [updateTestParams],
          ),
        )),
      ) as _i4.FutureOr<_i2.Either<_i5.Failure, _i6.Test>>);
  @override
  _i4.FutureOr<_i2.Either<_i5.Failure, _i2.Unit>> deleteTestById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTestById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteTestById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteTestById,
            [id],
          ),
        )),
      ) as _i4.FutureOr<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [AuthorizationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationRepository extends _i1.Mock
    implements _i7.AuthorizationRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>> checkToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkToken,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>>.value(
                _FakeEither_0<_i5.Failure, _i8.AuthorizationData>(
          this,
          Invocation.method(
            #checkToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>>.value(
                _FakeEither_0<_i5.Failure, _i8.AuthorizationData>(
          this,
          Invocation.method(
            #checkToken,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>> logIn(
          _i9.AuthorizationParams? authorizationParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [authorizationParams],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>>.value(
                _FakeEither_0<_i5.Failure, _i8.AuthorizationData>(
          this,
          Invocation.method(
            #logIn,
            [authorizationParams],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>>.value(
                _FakeEither_0<_i5.Failure, _i8.AuthorizationData>(
          this,
          Invocation.method(
            #logIn,
            [authorizationParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.AuthorizationData>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
